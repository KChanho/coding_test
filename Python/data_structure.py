#파이썬 자료형
#정수형, 실수형, 복소수형, 문자열, 리스트, 튜플, 사전



#정수형(Integer)
a = 10
a = -10
a = 0

#실수형(Real Number) - 4바이트나 8바이트의 메모리에 할당하므로 2진수의 한계에 의해 오차 발생 가능
a = 153.79
a = -548.21
a = 5.      #정수부와 실수부 중 하나가 0일 경우 생략하고 .만 표시
a = -.78
a = 0.3 + 0.6 #0.89999999999 
round(a, 4)   #0.9 - round() 함수를 이용하여 반올림하여 오차 방지

#지수 표현 방식(e, E) - 실수형 데이터로 처리, 임의의 큰 수를 표현하기 위해 사용(특정 조건 내에서의 무한 표현 등)
a = 1e9     # 1 * 10^9
a = 75.25e1 # 752.5
a = 3954e-3 # 3.954

# /: 나누기 연산자, 실수형 반환
# %: 나머지 연산자
# //: 몫 연산자, 정수형 변환
# **: 거듭제곱 연산자...



#리스트 자료형(배열, 테이블) - 데이터를 연속적으로 담아 처리하기 위한 자료형
a = [1,2,3,4,5]
print(a[3]) #인덱싱
print(a[-1])  #음의 정수를 넣으면 거꾸로 리스트 원소 탐색
print(a[1:5]) #슬라이싱 (끝 인덱스는 실제 인덱스보다 1 크게 설정)
n = 10
a = [0] * n
a = [i for i in range(20) if i % 2 == 1]  #리스트 컴프리헨션
m = 10
a = [[0] * m for _ in range(n)] #리스트 컴프리헨션으로 2차원 배열 초기화 - 반복에 의한 변수 값 무시할 때 언더바 사용
#리스트 관련 메소드: append(), sort(), reverse(), insert(), count(), remove() ...
a = [1, 2, 3, 4, 5]
remove_set {3, 5} #집합 자료형
result = [i for i in a if i not in remove_set]



#문자열 자료형 - 인덱싱과 슬라이싱은 가능하지만, 특정 인덱스의 값 변경 불가(Immutable)
a = " '안녕' "  #큰 따옴표로 문자열 초기화 시, 작은 따옴표는 그대로 입력
a = ' "안녕" '  #작은 따옴표로 문자열 초기화 시, 큰 따옴표는 그대로 입력
a = " \"안녕\" "  #백슬래시를 활용하여 특수문자 입력 가능
a = "안녕" + "하세요"  #문자열 덧셈
a = "안녕" * 3  #문자열 곱셈
print(a[2:4])

#튜플 자료형 - 리스트와 유사하지만 한 번 선언된 값 변경 불가 및 대괄호([])대신 소괄호(()) 사용, 리스트에 비해 상대적으로 공간 효율적
a = (1,2,3,4,5)
print(a[1:4]) #인덱싱과 슬라이싱 가능
#서로 다른 성질의 데이터를 묶어서 관리해야 할 때(순서쌍 등), 데이터의 나열을 해싱의 키 값으로 사용할 때 튜플 활용



#사전 자료형 - 키와 값의 쌍을 데이터로 가지는 자료형, 변경 불가능한(Immuatable) 자료형을 키로 사용, 해시 테이블을 이용하여 데이터 조회 및 수정의 시간복잡도 O(1)
data = dict()
data['사과'] = 'Apple'
data = {'사과': 'Apple', '배': 'Pear'}
data.keys() #키 데이터만 모아 반환하는 메서드
data.values() #값 데이터만 모아 반환하는 메서드

#집합 자료형 - 중복 허용하지 않음, 순서 없음, 데이터의 조회 및 수정을 O(1) 시간복잡도로 처리
data = set([1,1,1,2,3,4,5]) #리스트에 set() 함수를 사용하여 초기화
data = {1,1,1,2,3,4,5}  #중괄호를 사용하여 초기화
a = set([1,2,3,4,5])
b = set([3,4,5,6,7])
print(a|b)  #합집합
print(a&b)  #교집합
print(a-b)  #차집합
data.add(9) #원소 추가
data.update([7, 8]) #원소 여러 개 추가
data.remove(3)  #원소 삭제
